buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group = "se.darknova"
    sourceCompatibility = '1.8'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile 'org.projectlombok:lombok:1.16.6'
        compile 'com.google.guava:guava:19.0-rc1'
        compile "com.google.inject:guice:$guiceVersion"

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "ch.qos.logback:logback-core:$logbackVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"
        runtime "org.codehaus.groovy:groovy:$groovyVersion"
    }
}

project(':client') {
    apply plugin: 'application'
    apply plugin: 'docker'

    mainClassName = 'se.darknova.template.client.Main'

    docker {
        baseImage = 'darknova/java8'
        applicationName = 'darknova-dns-client'
    }

    dependencies {
        compile 'se.darknova:discovery-module:1.0-SNAPSHOT'
    }
}

project(':service') {
    apply plugin: 'application'
    apply plugin: 'docker'

    mainClassName = 'se.darknova.template.service.Main'
    applicationDefaultJvmArgs = ['-Dcom.sun.management.jmxremote.port=3333',
                                 '-Dcom.sun.management.jmxremote.ssl=false',
                                 '-Dcom.sun.management.jmxremote.authenticate=false']

    distDocker {
        exposePort 8250
        setEnvironment 'SERVICE_NAME', 'darknova-test'
        setEnvironment 'SERVICE_8250_TAGS', 'video'
        runCommand 'opkg-install bash'
    }

    docker {
        baseImage = 'darknova/java8'
        applicationName = 'darknova-test-service'
    }

    dependencies {
        compile 'se.darknova:service-module:1.0-SNAPSHOT'
        compile 'se.darknova:rest-module:1.0-SNAPSHOT'
        compile 'se.darknova:config-module:1.0-SNAPSHOT'
        compile 'se.darknova:monitor-module:1.0-SNAPSHOT'
    }
}
